function ScanServidor {
    $url = Read-Host "Digite a URL do site para scan (ex: http://scanme.org)"

    try {
        $headers = @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Safari/537.36"
        }

        $web = Invoke-WebRequest -Uri $url -Method Options -Headers $headers -ErrorAction Stop

        Write-Host "`nO servidor roda: "
        $web.Headers.Server
        Write-Host ""

        Write-Host "O servidor aceita os m√©todos: "
        $web.Headers.Allow
        Write-Host ""

        Write-Host "Links encontrados: "
        $web2 = Invoke-WebRequest -Uri $url -Headers $headers -ErrorAction Stop
        $web2.Links.Href | Select-String http
    }
    catch {
        Write-Host "Erro ao conectar-se ao servidor: $_" -ForegroundColor Red
    }
}

ScanServidor


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ========================== #
#        SCANNER WEB         #
# ========================== #

# Disfarce para evitar bloqueios (finge ser um navegador real)
$headers = @{
    "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Safari/537.36"
}

# === 1. Captura Headers do Servidor ===
function ScanHeaders {
    param ([string]$url)
    try {
        Write-Host "`nüîç Escaneando Headers..." -ForegroundColor Cyan
        $response = Invoke-WebRequest -Uri $url -Method Head -Headers $headers -ErrorAction Stop
        Write-Host "`nüìå O servidor roda:" -ForegroundColor Green
        $response.Headers.Server
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao buscar headers: $_" -ForegroundColor Red
    }
}

# === 2. Descobre os M√©todos HTTP Permitidos ===
function ScanOptions {
    param ([string]$url)
    try {
        Write-Host "`nüîç Verificando m√©todos HTTP suportados..." -ForegroundColor Cyan
        $response = Invoke-WebRequest -Uri $url -Method Options -Headers $headers -ErrorAction Stop
        Write-Host "`n‚úÖ M√©todos permitidos pelo servidor:" -ForegroundColor Green
        $response.Headers.Allow
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao buscar m√©todos OPTIONS: $_" -ForegroundColor Red
    }
}

# === 3. Lista os Links Encontrados no HTML ===
function ScanLinks {
    param ([string]$url)
    try {
        Write-Host "`nüîç Procurando links na p√°gina..." -ForegroundColor Cyan
        $response = Invoke-WebRequest -Uri $url -Headers $headers -ErrorAction Stop
        Write-Host "`nüîó Links encontrados:" -ForegroundColor Green
        $response.Links.Href | Select-String http
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao buscar links: $_" -ForegroundColor Red
    }
}

# === 4. Obt√©m C√≥digo-Fonte do HTML ===
function ScanHTML {
    param ([string]$url)
    try {
        Write-Host "`nüîç Obtendo c√≥digo-fonte do HTML..." -ForegroundColor Cyan
        $response = Invoke-WebRequest -Uri $url -Headers $headers -ErrorAction Stop
        Write-Host "`nüìù C√≥digo HTML recebido:" -ForegroundColor Green
        Write-Host $response.Content.Substring(0, 500) # Exibe os primeiros 500 caracteres
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao obter o HTML: $_" -ForegroundColor Red
    }
}

# === 5. Detecta Tecnologias Utilizadas (ex: WordPress, Cloudflare, etc.) ===
function ScanTech {
    param ([string]$url)
    try {
        Write-Host "`nüîç Detectando tecnologias utilizadas..." -ForegroundColor Cyan
        $response = Invoke-WebRequest -Uri $url -Headers $headers -ErrorAction Stop
        if ($response.Headers["x-powered-by"]) {
            Write-Host "`n‚öôÔ∏è Tecnologia detectada:" -ForegroundColor Green
            $response.Headers["x-powered-by"]
        } else {
            Write-Host "‚ùå Nenhuma tecnologia detectada nos headers."
        }
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao buscar tecnologias: $_" -ForegroundColor Red
    }
}

# === 6. Obt√©m C√≥digo de Status HTTP ===
function ScanStatusCode {
    param ([string]$url)
    try {
        Write-Host "`nüîç Obtendo c√≥digo de status HTTP..." -ForegroundColor Cyan
        $response = Invoke-WebRequest -Uri $url -Headers $headers -ErrorAction Stop
        Write-Host "`n‚úÖ Status Code:" -ForegroundColor Green
        $response.StatusCode
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao obter Status Code: $_" -ForegroundColor Red
    }
}

# === 7. Obt√©m o <title> da P√°gina ===
function ScanTitle {
    param ([string]$url)
    try {
        Write-Host "`nüîç Obtendo t√≠tulo da p√°gina..." -ForegroundColor Cyan
        $response = Invoke-WebRequest -Uri $url -Headers $headers -ErrorAction Stop
        if ($response.ParsedHtml.title) {
            Write-Host "`nüè∑Ô∏è T√≠tulo da p√°gina:" -ForegroundColor Green
            $response.ParsedHtml.title
        } else {
            Write-Host "‚ùå Nenhum t√≠tulo encontrado."
        }
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao obter t√≠tulo da p√°gina: $_" -ForegroundColor Red
    }
}

# === 8. Verifica o arquivo robots.txt ===
function ScanRobotsTxt {
    param ([string]$url)
    try {
        Write-Host "`nüîç Procurando robots.txt..." -ForegroundColor Cyan
        $robotsUrl = "$url/robots.txt"
        $response = Invoke-WebRequest -Uri $robotsUrl -Headers $headers -ErrorAction Stop
        Write-Host "`nü§ñ Conte√∫do do robots.txt:" -ForegroundColor Green
        Write-Host $response.Content
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao buscar robots.txt: $_" -ForegroundColor Red
    }
}

# === 9. Verifica se o site possui um Sitemap ===
function ScanSitemap {
    param ([string]$url)
    try {
        Write-Host "`nüîç Verificando sitemap.xml..." -ForegroundColor Cyan
        $sitemapUrl = "$url/sitemap.xml"
        $response = Invoke-WebRequest -Uri $sitemapUrl -Headers $headers -ErrorAction Stop
        Write-Host "`nüó∫Ô∏è Sitemap encontrado:" -ForegroundColor Green
        Write-Host $response.Content.Substring(0, 500)
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao buscar sitemap.xml: $_" -ForegroundColor Red
    }
}

# === 10. Faz um Scan R√°pido das Portas Comuns ===
function ScanPorts {
    param ([string]$host)
    $ports = @(21, 22, 25, 53, 80, 110, 143, 443, 3306, 8080)
    Write-Host "`nüîç Escaneando portas comuns..." -ForegroundColor Cyan
    foreach ($port in $ports) {
        try {
            $tcp = New-Object System.Net.Sockets.TcpClient
            $tcp.Connect($host, $port)
            Write-Host "üü¢ Porta $port aberta!" -ForegroundColor Green
            $tcp.Close()
        } catch {
            Write-Host "üî¥ Porta $port fechada."
        }
    }
}

# === Entrada do Usu√°rio ===
$url = Read-Host "Digite a URL do site para scan (ex: http://scanme.org)"

# === Chamando todas as fun√ß√µes ===
ScanHeaders -url $url
ScanOptions -url $url
ScanLinks -url $url
ScanHTML -url $url
ScanTech -url $url
ScanStatusCode -url $url
ScanTitle -url $url
ScanRobotsTxt -url $url
ScanSitemap -url $url
### ScanPorts -host ($url -replace "http://|https://", "")
